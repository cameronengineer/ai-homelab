{{- if .Values.ollama.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "ai-homelab.fullname" . }}-ollama-scripts
  labels:
    {{- include "ai-homelab.labels" . | nindent 4 }}
    app.kubernetes.io/component: ollama
data:
  manage_models.sh: |
    #!/bin/bash
    set -euo pipefail
    
    export OLLAMA_EXPERIMENT=client2
    
    log() {
        echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"
    }
    
    # Validate environment
    if [[ -z "${OLLAMA_MODELS_LIST:-}" ]]; then
        log "WARNING: OLLAMA_MODELS_LIST environment variable not set, no models will be managed"
        OLLAMA_MODELS_LIST=""
    fi
    
    # Start Ollama server in background
    log "Starting Ollama server"
    ollama serve &
    
    # Wait for server to be ready
    log "Waiting for Ollama server to start"
    sleep 5
    log "Ollama server is running"
    
    # Only manage models if OLLAMA_MODELS_LIST is provided
    if [[ -n "$OLLAMA_MODELS_LIST" ]]; then
        # Parse model list into array
        IFS=',' read -ra DESIRED_MODELS <<< "$OLLAMA_MODELS_LIST"
        log "Desired models: ${DESIRED_MODELS[*]}"
        
        # Get currently installed models
        INSTALLED_MODELS=()
        while IFS= read -r line; do
            # More flexible regex to capture model names
            if [[ $line =~ ^[[:space:]]*([a-zA-Z0-9._/-]+:[a-zA-Z0-9._-]+|[a-zA-Z0-9._/-]+) ]]; then
                model_name="${BASH_REMATCH[1]}"
                # Clean up any extra whitespace
                model_name=$(echo "$model_name" | xargs)
                INSTALLED_MODELS+=("$model_name")
            fi
        done < <(ollama list 2>/dev/null || true)
        log "Currently installed models: ${INSTALLED_MODELS[*]:-none}"
        
        # Find models to remove (only if DESIRED_MODELS is not empty)
        MODELS_TO_REMOVE=()
        if [[ ${#DESIRED_MODELS[@]} -gt 0 && -n "${DESIRED_MODELS[0]}" ]]; then
            for model in "${INSTALLED_MODELS[@]}"; do
                [[ " ${DESIRED_MODELS[*]} " != *" $model "* ]] && MODELS_TO_REMOVE+=("$model")
            done
        fi
        
        # Find models to install
        MODELS_TO_INSTALL=()
        for model in "${DESIRED_MODELS[@]}"; do
            [[ -n "$model" && " ${INSTALLED_MODELS[*]} " != *" $model "* ]] && MODELS_TO_INSTALL+=("$model")
        done
        
        # Remove unwanted models
        for model in "${MODELS_TO_REMOVE[@]}"; do
            log "Removing model: $model"
            if ollama rm "$model"; then
                log "Successfully removed: $model"
            else
                log "Failed to remove: $model"
            fi
        done
        
        # Install missing models
        for model in "${MODELS_TO_INSTALL[@]}"; do
            log "Installing model: $model"
            if timeout 1800 ollama pull "$model"; then
                log "Successfully installed: $model"
            else
                log "Failed to install: $model"
            fi
        done
        
        log "Model synchronization completed"
    else
        log "No models specified for management"
    fi
    
    log "Model management completed successfully"
    exit 0
{{- end }}
